version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: gold_tracker_db
    environment:
      POSTGRES_USER: ${DB_USER:-golduser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-goldpass}
      POSTGRES_DB: ${DB_NAME:-gold_tracker}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - gold_tracker_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-golduser}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: gold_tracker_api
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-gold_tracker}
      DB_USER: ${DB_USER:-golduser}
      DB_PASSWORD: ${DB_PASSWORD:-goldpass}
      JWT_SECRET: ${JWT_SECRET}
      METALS_API_KEY: ${METALS_API_KEY}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
    ports:
      - "${API_PORT:-5000}:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - gold_tracker_network
    restart: unless-stopped

  # Frontend (Next.js)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gold_tracker_frontend
    environment:
      API_URL: http://backend:5000
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - gold_tracker_network
    restart: unless-stopped

networks:
  gold_tracker_network:
    driver: bridge

volumes:
  postgres_data:
